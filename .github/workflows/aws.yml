name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: region
  ECR_REPOSITORY: repo
  ECS_SERVICE: service
  ECS_CLUSTER: cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: container

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./hello_darlin
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Inject secrets into task definition using jq
      run: |
        # Replace placeholders for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY with GitHub Secrets
        jq '( .containerDefinitions[].environment[] | select(.name=="AWS_ACCESS_KEY_ID") ).value |= env.BOTO_AWS_ACCESS_KEY_ID' .aws/task-definition.json > task-def-temp.json
        jq '( .containerDefinitions[].environment[] | select(.name=="AWS_SECRET_ACCESS_KEY") ).value |= env.BOTO_AWS_SECRET_ACCESS_KEY' task-def-temp.json > task-def-final.json
      env:
        BOTO_AWS_ACCESS_KEY_ID: ${{ secrets.BOTO_AWS_ACCESS_KEY_ID }}
        BOTO_AWS_SECRET_ACCESS_KEY: ${{ secrets.BOTO_AWS_SECRET_ACCESS_KEY }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def-final.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
